# 7-base_geometry.txt

Importing The Function From Class
::
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> integer_validator = __import__("7-base_geometry").BaseGeometry.integer_validator.__doc__
    >>> area = __import__("7-base_geometry").BaseGeometry.area.__doc__

::
    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

::
    >>> print(bg)
    <7-base_geometry.BaseGeometry object at ...>

::
    >>> bg = BaseGeometry(None)
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.__init__() takes 1 positional argument but 2 were given

::
    >>> print(bg.area)
    <bound method BaseGeometry.area of <7-base_geometry.BaseGeometry object at...>>

::
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

::
    >>> bg.integer_validator("test", 3)

::
    >>> bg.integer_validator("test", -2)
    Traceback (most recent call last):
    ...
    ValueError: test must be greater than 0

::
    >>> bg.integer_validator("test", 0)
    Traceback (most recent call last):
    ...
    ValueError: test must be greater than 0

::
    >>> bg.integer_validator("test", "2")
    Traceback (most recent call last):
    ...
    TypeError: test must be an integer


::
    >>> bg.integer_validator("test")
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'


::
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

::
    >>> print(bg.integer_validator)
    <bound method BaseGeometry.integer_validator of <7-base_geometry.BaseGeometry object at...>>
